var searchIndex = JSON.parse('{\
"swap_buffer_queue":{"doc":"swap-buffer-queue","t":[6,3,6,0,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,3,8,3,3,16,8,8,16,3,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,13,13,13,13,13,4,13,3,13,13,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,3,11,11,11,11,11,11,11,11,11,11,11,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AsyncSBQueue","SBQueue","SyncSBQueue","async","borrow","borrow_mut","buffer","capacity","close","default","dequeue","dequeue","enqueue","enqueue","error","fmt","from","into","is_closed","is_empty","len","new","notify","notify","reopen","sync","try_dequeue","try_dequeue_and_resize","try_dequeue_timeout","try_enqueue","try_enqueue_timeout","try_from","try_into","type_id","with_capacity","write","write_vectored","AsyncNotifier","borrow","borrow_mut","default","fmt","from","into","notify_dequeue","notify_enqueue","try_from","try_into","type_id","ArrayBuffer","Buffer","BufferIter","BufferSlice","Drain","Drainable","Resizable","Slice","VecBuffer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","clear","clear","clear","debug","debug","debug","default","default","deref","deref_mut","drain","drain","drain","drop","drop","fmt","from","from","from","from","insert","insert","insert","into","into","into","into","into_iter","into_iter","next","resize","resize","size_hint","slice","slice","slice","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_size","value_size","value_size","Closed","Closed","Closed","Conflict","Conflict","DequeueError","Empty","EnqueueError","InsufficientCapacity","Pending","TryDequeueError","TryEnqueueError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","inner","inner","into","into","into","into","provide","provide","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Notify","notify_dequeue","notify_enqueue","SyncNotifier","borrow","borrow_mut","default","fmt","from","into","notify_dequeue","notify_enqueue","try_from","try_into","type_id","BytesSlice","WriteArrayBuffer","WriteBytesSlice","WriteVecBuffer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","debug","debug","default","default","deref","deref_mut","fmt","frame","frame_mut","from","from","from","header","insert","insert","into","into","into","resize","size","slice","slice","trailer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_size","value_size","write","VectoredFrame","VectoredSlice","WriteVectoredArrayBuffer","WriteVectoredVecBuffer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","debug","debug","default","default","deref","deref","deref_mut","deref_mut","drain","drain","drop","fmt","fmt","frame","from","from","from","from","insert","insert","into","into","into","into","resize","slice","slice","total_size","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_size","value_size"],"q":["swap_buffer_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","swap_buffer_queue::async","","","","","","","","","","","","swap_buffer_queue::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","swap_buffer_queue::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","swap_buffer_queue::notify","","","swap_buffer_queue::sync","","","","","","","","","","","","swap_buffer_queue::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","swap_buffer_queue::write_vectored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An asynchronous implementation of <code>SBQueue</code>.","A buffered MPSC “swap-buffer” queue.","A synchronous implementation of <code>SBQueue</code>.","Asynchronous implementation of <code>SBQueue</code>.","","","<code>Buffer</code> definition and simple implementations.","Returns the current buffer capacity.","Closes the queue.","","Dequeues a buffer with all enqueued values from the queue.","Dequeues a buffer with all enqueued values from the queue.","Enqueues the given value inside the queue.","Enqueues the given value inside the queue.","Queue error types.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is closed.","Returns <code>true</code> if the current buffer is empty.","Returns the current buffer length.","Create a new queue using buffer default.","Tool for (a)synchronous implementation.","Create a new queue with the given capacity.","Reopen a closed queue.","Synchronous implementation of <code>SBQueue</code>.","Tries dequeuing a buffer with all enqueued values from the …","Tries dequeuing a buffer with all enqueued values from the …","Tries dequeuing a buffer with all enqueued values from the …","Tries enqueuing the given value into the queue.","Tries enqueuing the given value inside the queue with a …","","","","Creates a new queue with the given capacity.","<code>Buffer</code> implementations to be used with <code>Write::write</code>.","<code>Buffer</code> implementations to be used with …","An asynchronous notifier.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A simple array buffer.","<code>SBQueue</code> buffer.","<code>Buffer</code> iterator returned by <code>BufferSlice::into_iter</code> (see …","<code>Buffer</code> slice returned by <code>SBQueue::try_dequeue</code> (see …","The drain type returned by <code>drain</code>.","<code>Buffer</code> whose value can be removed and returned as an …","Resizable <code>Buffer</code>.","The slice type returned by <code>slice</code> method.","A simple vector buffer.","","","","","","","","","Returns the buffer’s capacity.","","","Clears the buffer.","","","Formats the buffer fields in debugging context.","","","","","","","Removes all elements of the buffer and returns them as an …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Inserts value into the buffer at the given index.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Resizes the buffer.","","","Returns a slice of the buffer.","","","","","","","","","","","","","","","Return the size taken by a value in the buffer.","","","The queue is closed.","The queue is closed.","The queue is closed.","The queue is concurrently dequeued.","The queue is concurrently dequeued.","Error returned by <code>SBQueue::dequeue</code>.","The queue is empty.","Error returned by <code>SBQueue::enqueue</code>.","The queue doesn’t have sufficient capacity to enqueue …","There is a concurrent insertion that need to end before …","Error returned by <code>SBQueue::try_dequeue</code>.","Error returned by <code>SBQueue::try_enqueue</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the value whose enqueuing has failed","Returns the value whose enqueuing has failed","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Notifier for waiting <code>SBQueue</code> operations.","Wake waiting dequeue operation.","Wake waiting enqueue operation.","A synchronous notifier.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A bytes slice with a <code>HEADER_SIZE</code>-bytes header and a …","A <code>N</code>-bytes buffer with a <code>HEADER_SIZE</code>-bytes header and a …","Bytes slice writer, used by <code>WriteArrayBuffer</code> and …","A bytes buffer with a <code>HEADER_SIZE</code>-bytes header and a …","","","","","","","","","","","","","","","","","","Returns the complete frame slice, with header and trailer …","Returns the complete mutable frame slice, with header and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference on the header part of the slice","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the size of the slice to be written.","","","Returns a mutable reference on the trailer part of the …","","","","","","","","","","","","Writes the slice.","A <em>framed</em> part of a <code>VectoredSlice</code>, with an <code>IoSlice</code> header …","A <em>vectored</em> slice, i.e. a slice of <code>IoSlice</code>.","A buffer of <code>IoSlice</code> of size <code>N</code>","A buffer of <code>IoSlice</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <em>framed</em> part of the vectored slice within the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the total size of all the buffered io-slices (see …","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,36,0,0,37,0,18,19,4,21,18,19,4,21,37,18,19,37,18,19,37,18,19,18,19,4,4,36,18,19,4,21,4,18,19,4,21,37,18,19,18,19,4,21,4,21,21,38,19,21,37,18,19,18,19,4,21,18,19,4,21,18,19,4,21,37,18,19,16,12,5,12,5,0,12,0,16,12,0,0,16,8,12,5,16,8,12,5,16,8,12,5,16,8,12,5,16,8,12,5,16,8,12,12,5,5,16,8,12,5,16,8,16,8,12,5,12,5,16,8,12,5,12,5,16,8,12,5,16,8,12,5,16,8,12,5,0,39,39,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,27,28,29,27,28,29,27,28,27,28,27,28,27,28,29,29,29,29,29,27,28,29,29,27,28,27,28,29,28,40,27,28,29,27,28,29,27,28,29,27,28,29,27,28,40,0,0,0,0,30,31,32,33,30,31,32,33,30,31,30,31,30,31,30,31,32,33,32,33,30,31,33,32,33,32,30,31,32,33,30,31,30,31,32,33,31,30,31,32,30,31,32,33,30,31,32,33,30,31,32,33,30,31],"f":[0,0,0,0,[[]],[[]],0,[1,2],[1],[[],1],[[[1,[3]]],[[6,[[4,[3]],5]]]],[[[1,[7]]],[[6,[[4,[7]],5]]]],[[[1,[7]]],[[6,[8]]]],[[[1,[3]]],[[6,[8]]]],0,[[1,9],10],[[]],[[]],[1,11],[1,11],[1,2],[[],1],0,[1],[1],0,[1,[[6,[4,12]]]],[[1,2,[14,[13]]],[[6,[4,12]]]],[[[1,[3]],15],[[6,[[4,[3]],12]]]],[1,[[6,[16]]]],[[[1,[3]],15],[[6,[16]]]],[[],6],[[],6],[[],17],[2,1],0,0,0,[[]],[[]],[[],7],[[7,9],10],[[]],[[]],[7],[7],[[],6],[[],6],[[],17],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[18,2],[19,2],[2],[[18,2]],[[19,2]],[20],[[18,20]],[[19,20]],[[],18],[[],19],[4],[4],[2],[[18,2]],[[19,2]],[4],[21],[[4,9],10],[[]],[[]],[[]],[[]],[2],[[18,2]],[[19,2]],[[]],[[]],[[]],[[]],[4],[[]],[21,14],[2],[[19,2]],[21],[2],[[18,2]],[[19,2]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],[[],17],[[],17],[[],2],[[],2],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[22]]],[[16,[22]]]],[[[8,[22]]],[[8,[22]]]],[12,12],[5,5],[[]],[[]],[[]],[[]],[[[16,[23]],16],11],[[[8,[23]],8],11],[[12,12],11],[[5,5],11],[[[16,[24]],9],10],[[[8,[24]],9],10],[[12,9],10],[[12,9],10],[[5,9],10],[[5,9],10],[[]],[[]],[[]],[[]],[16],[8],[[]],[[]],[[]],[[]],[25],[25],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],[[],17],[[],17],0,[[]],[[]],0,[[]],[[]],[[],3],[[3,9],10],[[]],[[]],[3],[3],[[],6],[[],6],[[],17],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[27,2],[28,2],[[27,2]],[[28,2]],[[27,20]],[[28,20]],[[],27],[[],28],[29],[29],[[29,9],10],[29],[29],[[]],[[]],[[]],[29],[[27,2]],[[28,2]],[[]],[[]],[[]],[[28,2]],[[],2],[[27,2]],[[28,2]],[29],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],[[],17],[[],2],[[],2],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,2],[31,2],[[30,2]],[[31,2]],[[30,20]],[[31,20]],[[],30],[[],31],[32],[33],[32],[33],[[30,2]],[[31,2]],[33],[[32,9],10],[[33,9],10],[[32,[34,[2]],[14,[35]],[14,[35]]],33],[[]],[[]],[[]],[[]],[[30,2]],[[31,2]],[[]],[[]],[[]],[[]],[[31,2]],[[30,2]],[[31,2]],[32,2],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],[[],17],[[],17],[[],2],[[],2]],"p":[[3,"SBQueue"],[15,"usize"],[3,"SyncNotifier"],[3,"BufferSlice"],[4,"DequeueError"],[4,"Result"],[3,"AsyncNotifier"],[3,"EnqueueError"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"TryDequeueError"],[8,"Iterator"],[4,"Option"],[3,"Duration"],[4,"TryEnqueueError"],[3,"TypeId"],[3,"ArrayBuffer"],[3,"VecBuffer"],[3,"DebugStruct"],[3,"BufferIter"],[8,"Clone"],[8,"PartialEq"],[8,"Debug"],[3,"Demand"],[3,"String"],[3,"WriteArrayBuffer"],[3,"WriteVecBuffer"],[3,"BytesSlice"],[3,"WriteVectoredArrayBuffer"],[3,"WriteVectoredVecBuffer"],[3,"VectoredSlice"],[3,"VectoredFrame"],[8,"RangeBounds"],[3,"IoSlice"],[8,"Drainable"],[8,"Buffer"],[8,"Resizable"],[8,"Notify"],[8,"WriteBytesSlice"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
